info(
    title: "设备管理模块"
    desc: "负责设备管理及设备交互"
    author: "杨磊"
    email: "603685348@qq.com"
    version: "v1"
)
import "common.api"  //公共结构体定义

@server(
    group : open/dm
    prefix: open/dm
)
service api {
    @doc "设备登录认证"
    @handler loginAuth
    post /loginAuth (LoginAuthReq) returns ()
    @doc "设备操作认证"
    @handler accessAuth
    post /accessAuth (AccessAuthReq) returns ()
    @doc "鉴定是否是root账号"
    @handler rootCheck
    post /rootCheck (RootCheckReq) returns ()

    @doc "设备管理"
    @handler manageDevice
    post /manageDevice (ManageDeviceReq) returns (DeviceInfo)
    @doc "产品管理"
    @handler manageProduct
    post /manageProduct (ManageProductReq) returns (ProductInfo)
    @doc "获取产品信息"
    @handler getProductInfo
    post /getProductInfo (GetProductInfoReq) returns (GetProductInfoResp)
    @doc "产品管理"
    @handler manageProductTemplate
    post /manageProductTemplate (ManageProductTemplateReq) returns (ProductTemplate)
    @doc "获取产品信息"
    @handler getProductTemplate
    post /getProductTemplate (GetProductTemplateReq) returns (ProductTemplate)
    @doc "获取设备信息"
    @handler getDeviceInfo
    post /getDeviceInfo (GetDeviceInfoReq) returns (GetDeviceInfoResp)
    @doc "同步调用设备行为"
    @handler sendAction
    post /sendAction (SendDmActionReq) returns (SendDmActionResp)
    @doc "同步调用设备属性"
    @handler sendProperty
    post /sendProperty (SendDmPropertyReq) returns (SendDmPropertyResp)
    @doc "获取设备日志信息"
    @handler getDeviceData
    get /getDeviceData (GetDeviceDataReq) returns (GetDeviceDataResp)
    @doc "获取设备日志信息"
    @handler getDeviceDescribeLog
    get /getDeviceDescribeLog (GetDeviceDescribeLogReq) returns (GetDeviceDescribeLogResp)
    @doc "获取SDK调试日志"
    @handler getDeviceSDKLog
    get /getDeviceSDKLog (GetDeviceSDKLogReq) returns (GetDeviceSDKLogResp)

    @doc "获取ota升级包上传信息"
    @handler genFirmwareUploadUri
    get /genFirmwareUploadUri(GenFirmwareUploadUriReq)returns (GenFirmwareUploadUriResp)
}

type GenFirmwareUploadUriReq struct{
    //预留后续传租户
}

type GenFirmwareUploadUriResp struct{
    Sign     string    `json:"sign"`//签名 jwt
    Host          string    `json:"host"`//上传地址
}


type LoginAuthReq struct {
    Username string `json:"username"`                          //用户名
    Password string `json:"password,optional"`                 //密码
    ClientID string `json:"clientID"`                          //clientID
    Ip string `json:"ip"`                                      //访问的ip地址
    Certificate string `json:"certificate,optional,omitempty"` //客户端证书 base64后传过来
}

type AccessAuthReq struct {
    Username string `json:"username,omitempty"`//用户名
    Topic string `json:"topic,omitempty"`      //主题
    ClientID string `json:"clientID,omitempty"`//clientID
    Access string `json:"access,omitempty"`    //操作
    Ip string `json:"ip,omitempty"`            //访问的ip地址
}

type RootCheckReq struct {
    Username string `json:"username,omitempty"`                //用户名
    Password string `json:"password,optional,omitempty"`       //密码
    ClientID string `json:"clientID,omitempty"`                //clientID
    Ip string `json:"ip,omitempty"`                            //访问的ip地址
    Certificate []byte `json:"certificate,optional,omitempty"` //客户端证书
}


type ProductTemplate struct {
    CreatedTime int64 `json:"createdTime,optional,string,omitempty"`   //创建时间 只读
    ProductID string `json:"productID,optional,omitempty"`             //产品id 只读
    Template string `json:"template,optional,omitempty"`               //数据模板
}

type ProductInfo struct {
    CreatedTime int64 `json:"createdTime,optional,string,omitempty"`                  //创建时间 只读
    ProductID string `json:"productID,optional,omitempty"`                            //产品id 只读
    ProductName string `json:"productName,optional,omitempty"`                        //产品名称
    AuthMode int64 `json:"authMode,optional"`                                         //认证方式:1:账密认证,2:秘钥认证
    DeviceType int64 `json:"deviceType,optional"`                                     //设备类型:1:设备,2:网关,3:子设备
    CategoryID int64 `json:"categoryID,optional"`                                     //产品品类
    NetType int64 `json:"netType,optional"`                                           //通讯方式:1:其他,2:wi-fi,3:2G/3G/4G,4:5G,5:BLE,6:LoRaWAN
    DataProto int64 `json:"dataProto,optional"`                                       //数据协议:1:自定义,2:数据模板
    AutoRegister int64 `json:"autoRegister,optional"`                                 //动态注册:1:关闭,2:打开,3:打开并自动创建设备
    Secret string `json:"secret,optional,omitempty"`                                  //动态注册产品秘钥 只读
    Description *string `json:"description,optional,omitempty"`                       //描述
    DevStatus *string `json:"devStatus,optional,omitempty"`                           // 产品状态
}

type ManageProductReq struct {

    Opt int64 `json:"opt,omitempty"`                   //操作 0:新增 1:修改 2:删除
    Info *ProductInfo `json:"info,optional,omitempty"` //产品信息
}

type GetProductInfoReq struct {
    ProductID string `json:"productID,optional,optional"`    //产品id  如果为空返回所有产品的信息
    Page *PageInfo `json:"page,optional,optional"`           //分页信息,只获取一个则不填
}

type GetProductInfoResp struct {
    List []*ProductInfo `json:"list,omitempty"`    //产品信息
    Total int64 `json:"total,optional,omitempty"`  //拥有的总数(只有分页的时候会返回)
    Num int64 `json:"num,optional,omitempty"`      //返回的数量
}

type ManageProductTemplateReq struct {
    Info *ProductTemplate `json:"info,optional,omitempty"` //产品信息
}

type GetProductTemplateReq struct {
    ProductID string `json:"productID"` //产品id
}


type GetProductTemplateResp struct {
    Info ProductTemplate `json:"info,omitempty"`    //产品信息
}

type DeviceInfo struct {

    ProductID string `json:"productID"`                                              //产品id 只读
    DeviceName string `json:"deviceName"`                                            //设备名称 读写
    CreatedTime int64 `json:"createdTime,optional,string"`                           //创建时间 只读
    Secret string `json:"secret,optional"`                                           //设备秘钥 只读
    FirstLogin int64 `json:"firstLogin,optional,string"`                             //激活时间 只读
    LastLogin int64 `json:"lastLogin,optional,string"`                               //最后上线时间 只读
    Version *string `json:"version,optional"`                                        // 固件版本  读写
    LogLevel int64 `json:"logLevel,optional"`                                        // 日志级别:1)关闭 2)错误 3)告警 4)信息 5)调试  读写
    Cert string `json:"cert,optional,omitempty"`                                     // 设备证书  只读
    IsOnline int64 `json:"isOnline,optional"`                                        // 在线状态:0)离线 1)在线
}

type ManageDeviceReq struct {
    Opt int64 `json:"opt,omitempty"`         //操作 0:新增 1:修改 2:删除
    Info *DeviceInfo `json:"info,omitempty"` //设备信息
}

type GetDeviceInfoReq struct {
    DeviceName string `json:"deviceName,optional"`    //设备名 为空时获取产品id下的所有设备信息
    ProductID string `json:"productID,omitempty"`     //产品id
    Page *PageInfo `json:"page,optional"`             //分页信息 只获取一个则不填
}
type GetDeviceInfoResp struct {
    List []*DeviceInfo `json:"list,omitempty"`    //设备信息
    Total int64 `json:"total,omitempty"`          //总数(只有分页的时候会返回)
    Num int64 `json:"num,omitempty"`              //返回的数量
}


//上面是设备管理及设备认证
//下面是和设备交互的模块
type SendDmPropertyReq struct {
    ProductID string `json:"productID,omitempty"`                       //产品id 获取产品id下的所有设备信息
    DeviceName string `json:"deviceName,omitempty"`                     //设备名
    Data string `json:"data,omitempty"`                                 //属性数据, JSON格式字符串, 注意字段需要在物模型属性里定义
    DataTimestamp int64 `json:"dataTimestamp,string,omitempty,optional"`//上报数据UNIX时间戳, 仅对Method:reported有效
    Method string `json:"method,omitempty,optional"`                    //请求类型 , 不填该参数或者 desired 表示下发属性给设备, reported 表示模拟设备上报属性
}

type SendDmPropertyResp struct {
    ClientToken string `json:"clientToken"`   //调用id
    Status string `json:"status"`             //返回状态
    Code int64 `json:"code,string"`           //设备返回状态码
    Data string `json:"data,omitempty"`       //返回信息
}

type SendDmActionReq struct {
    ProductID string `json:"productID,omitempty"`     //产品id 获取产品id下的所有设备信息
    DeviceName string `json:"deviceName,omitempty"`   //设备名
    ActionId string `json:"actionId,omitempty"`       //产品数据模板中行为功能的标识符，由开发者自行根据设备的应用场景定义
    InputParams string `json:"inputParams,omitempty"` //输入参数
}

type SendDmActionResp struct {
    ClientToken string `json:"clientToken,omitempty"`        //调用id
    OutputParams string `json:"outputParams,omitempty"`      //输出参数 注意：此字段可能返回 null，表示取不到有效值。
    Status string `json:"status,omitempty"`                  //返回状态
    Code int64 `json:"code,string,omitempty"`                //设备返回状态码
}

type GetDeviceDataReq struct {
    Method string `form:"method,omitempty"`                               //获取的类型   property 属性 event事件  log 所有日志
    DeviceName string `form:"deviceName,omitempty"`                       //设备名
    ProductID string `form:"productID,omitempty"`                         //产品id 获取产品id下的所有设备信息
    DataID string `form:"dataID,optional,omitempty"`                      //获取的具体标识符的数据 如果不指定则获取所有属性数据,一个属性一条,如果没有获取到的不会返回值
    TimeStart int64 `form:"timeStart,string,optional,omitempty"`          //获取时间的开始
    TimeEnd int64 `form:"timeEnd,string,optional,omitempty"`              //时间的结束
    Limit int64 `form:"limit,optional,omitempty"`                         //获取的长度
}

//设备的日志数据
type DeviceData struct {
    Timestamp int64 `json:"timestamp,string"`               //发生时间戳
    Type string `json:"type,omitempty"`                     //类型 事件类型: 信息:info  告警alert  故障:fault
    DataID string `json:"dataID"`                           //获取的具体属性值
    GetValue string `json:"getValue,omitempty"`             //获取到的值
    SendValue string `json:"sendValue,omitempty"`           //发送过去的参数(action限定)
}

//获取对应日志信息
type GetDeviceDataResp struct {
    Total int64 `json:"total,string"`//总数
    List []*DeviceData `json:"list"` //总数
}


//实时获取对应信息
type GetDeviceDescribeLogReq struct {
    ProductID string `form:"productID,omitempty"`
    DeviceName string `form:"deviceName,omitempty"`
    TimeStart int64 `form:"timeStart,optional,string,omitempty"`
    TimeEnd int64 `form:"timeEnd,optional,string,omitempty"`
    Limit int64 `form:"limit,optional,omitempty"`
}
//实时获取对应信息
type GetDeviceDescribeLogResp struct {
    List []*DeviceDescribeLog `json:"list,omitempty"`
}
//设备的日志数据
type DeviceDescribeLog struct {
    Timestamp int64 `json:"timestamp,string"`
    Action string `json:"action"`
    RequestID string `json:"requestID"`
    TranceID string `json:"tranceID"`
    Topic string `json:"topic"`
    Content string `json:"content"`
    ResultType int64 `json:"resultType,string"`
}

type GetDevicePropertyStatusReq struct {
    ProductID string `form:"productID,omitempty"`
    DeviceName string `form:"deviceName,omitempty"`
}
type DevicePropertyStatus struct {
    Type string `json:"type"`
    Id string `json:"id"`
    Name string `json:"name"`
    Time int64 `json:"time,string"`
    Unit string `json:"unit"`
    Value *string `json:"value"`
}
type GetDevicePropertyStatusResp struct {
    List []*DevicePropertyStatus `json:"list"`
}
//获取SDK调试信息
type GetDeviceSDKLogReq struct {
    ProductID string `form:"productID,omitempty"`
    DeviceName string `form:"deviceName,omitempty"`
    TimeStart int64 `form:"timeStart,optional,string,omitempty"`
    TimeEnd int64 `form:"timeEnd,optional,string,omitempty"`
    Limit int64 `form:"limit,optional,omitempty"`
    Page     int64 `form:"page,optional"`         // 页码
    PageSize int64 `form:"pageSize,optional"` // 每页大小
}
type GetDeviceSDKLogResp struct {
    List []*DeviceSDKLog `json:"list,omitempty"`
}
type DeviceSDKLog struct {
    Timestamp int64 `json:"timestamp,string"`
    Loglevel int64 `json:"loglevel,string"`
    Content string `json:"content"`
}
